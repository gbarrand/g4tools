// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file tools.license for terms.

#ifndef tools_sg_color
#define tools_sg_color

#include "node"

#include "sf_vec"
#include "render_action"
#include "../colorf"

namespace tools {
namespace sg {

class color : public node {
  TOOLS_NODE(color,tools::sg::color,node)
public:
  sf_vec<colorf,float> rgb;
  sf<float> transparency; //alpha=1-transparency. Opaque is transparency=0.
public:
  virtual const desc_fields& node_desc_fields() const {
    TOOLS_FIELD_DESC_NODE_CLASS(tools::sg::color)
    static const desc_fields s_v(parent::node_desc_fields(),2, //WARNING : take care of count.
      TOOLS_ARG_FIELD_DESC(rgb),
      TOOLS_ARG_FIELD_DESC(transparency)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&rgb);
    add_field(&transparency);
  }
public:
  virtual void render(render_action& a_action) {
    // GL-ES : ::glMaterialfv does not work. We then use :
    //         ::glEnable(GL_COLOR_MATERIAL) and ::glColor.

    //if(a_action.state().m_GL_LIGHTING) {
    //  float params[4];
    //  params[0] = rgb.value().r();
    //  params[1] = rgb.value().g();
    //  params[2] = rgb.value().b();
    //  params[3] = 1-transparency.value();
    //  ::glMaterialfv(GL_FRONT,GL_DIFFUSE,params);
    //} else {
    //}

    state& state = a_action.state();
    state.m_color[0] = rgb.value().r();
    state.m_color[1] = rgb.value().g();
    state.m_color[2] = rgb.value().b();
    state.m_color[3] = 1-transparency.value();
    a_action.color4f(state.m_color);
  }
public:
  color()
  :parent()
  ,rgb(colorf_default())
  ,transparency(0.0f)
  {
    add_fields();
  }
  virtual ~color(){}
public:
  color(const color& a_from)
  :parent(a_from)
  ,rgb(a_from.rgb)
  ,transparency(a_from.transparency)
  {
    add_fields();
  }
  color& operator=(const color& a_from){
    parent::operator=(a_from);

    rgb = a_from.rgb;
    transparency = a_from.transparency;

    return *this;
  }
};

}}

#endif
