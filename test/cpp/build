#!/bin/sh -f

what=""

build_debug=no
build_verbose=no

build_mem=no

build_use_our=no

build_parallel=no

build_gnu=no
build_icc=no
build_clang=no
build_mingw_gnu=no

build_cl_exe=no
if [ "`uname | grep CYGWIN`" != "" ] ; then build_cl_exe=yes; fi
if [ "`uname -r | grep Microsoft`" != "" ] ; then build_cl_exe=yes; fi

args=""
while test $# -ge 1 ; do
  case $1 in
    -g) build_debug=yes;      args="${args} $1";;
    -v) build_verbose=yes;    args="${args} $1";;
    -x) build_verbose=yes;    args="${args} $1";;
    
    -gnu)   build_gnu=yes;build_icc=no;build_clang=no;build_cl_exe=no;build_mingw_gnu=no; args="${args} $1";;
    -icc)   build_icc=yes;build_gnu=no;build_clang=no;build_cl_exe=no;build_mingw_gnu=no; args="${args} $1";;
    -clang) build_clang=yes;build_gnu=no;build_icc=no;build_cl_exe=no;build_mingw_gnu=no; args="${args} $1";;
    -mingw_gnu) build_clang=no;build_gnu=no;build_icc=no;build_cl_exe=no;build_mingw_gnu=yes; args="${args} $1";;
    -mingw_gcc) build_clang=no;build_gnu=no;build_icc=no;build_cl_exe=no;build_mingw_gnu=yes; args="${args} $1";;

    -mem) build_mem=yes;      args="${args} $1";;

    -parallel) build_parallel=yes; args="${args} $1";;
    
    -our)    build_use_our=yes;;

    -*) echo "unknown option : $1" ; exit ;;
     *) if [ $# = 1 ] ; then
          what=$1
        else         
          echo "unknown option : $1"
        fi
        ;;
  esac
  shift
done

#////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////

if [ "${what}" = "" ] ; then
  find . -maxdepth 1 -name '*.cpp' -exec ./build ${args} {} \;
  exit
fi

if [ ${build_verbose} = "yes" ] ; then set -x;fi

exa=`basename ${what}`

exa=`echo ${exa} | sed -e 's:.cpp::g'`
exa=`echo ${exa} | sed -e 's:.mm::g'`
exa=`echo ${exa} | sed -e 's:./::g'`

echo "build ${exa}..."

. ./use_cpp
. ./use_cc
. ./use_sys

. ./build_bin_dir

use_archive=yes

#//////////////////////////////////////////////////////
#//////////////////////////////////////////////////////
#//////////////////////////////////////////////////////
#if [ ${build_cl_exe} = "yes" ] ; then
#  # rm painfull warnings about API strcpy, etc... deprecated.
#  # 64 bits machines : size_t to unsigned int : rm these warnings for the moment :
#  cppflags="${cppflags} -wd4267"
#  ccflags0="${ccflags0} -wd4267"
#fi

cppflags="${cppflags} -I../.."

# to include the g4tools/test/cpp/tools files:
cppflags="${cppflags} -I."

# so that g4tools/test/cpp/tools files can include the g4tools/tools ones:
test_cppflags="${test_cppflags} -I../../tools"
test_cppflags="${test_cppflags} -I../../tools/histo"
test_cppflags="${test_cppflags} -I../../tools/sg"
test_cppflags="${test_cppflags} -I../../tools/lina"

cppflags="${cppflags} -DNDEBUG"

#////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////
if [ ${exa} = "raxml" ] ; then use_expat=yes; fi
if [ ${exa} = "wroot" ] ; then use_zlib=yes; fi
if [ ${exa} = "wroot_cycle" ] ; then use_zlib=yes; fi
if [ ${exa} = "wroot_ntu_1000_cols" ] ; then use_zlib=yes; fi
if [ ${exa} = "mt_ntuple" ] ; then use_thread=yes; fi
if [ ${exa} = "mt_ntuple_ref" ] ; then use_thread=yes; fi
if [ ${exa} = "mpi_histos" ] ; then
  if [ ${build_cl_exe} = "yes" ] ; then
    build_use_our=yes
  elif [ ${build_mingw_gnu} = "yes" ] ; then
    build_use_our=yes
  fi      
  use_mpi=yes
fi
if [ ${exa} = "mpi_ntuple" ] ; then
  if [ ${build_cl_exe} = "yes" ] ; then
    build_use_our=yes
  elif [ ${build_mingw_gnu} = "yes" ] ; then
    build_use_our=yes
  fi      
  use_zlib=yes
  use_mpi=yes
fi

if [ ${exa} = "rroot" ] ; then
  use_zlib=yes
  if [ -f ../src/csz_inflate.cc ] ; then    # g4tools under G4/src/externals
    cfiles="${cfiles} ../src/csz_inflate.cc"
 #elif [ -f ../g4tools/src/csz_inflate.cc ] ; then      # g4tools under G4/src/analysis
 #  cfiles="${cfiles} ../g4tools/src/csz_inflate.cc"
  else
    cfiles="${cfiles} ../../src/csz_inflate.cc"
  fi
fi
if [ ${exa} = "viewplot" ] ; then
  use_expat=yes
  use_freetype=yes
  use_png=yes
  use_jpeg=yes
  if [ ${build_cl_exe} = "yes" ] ; then
    # ourex/jpeg uses MessageBox for errors:
    use_Windows=yes
  elif [ ${build_mingw_gnu} = "yes" ] ; then
    use_Windows=yes
  fi
fi

if [ ${exa} = "hdf5_histos" ] ; then
  use_hdf5=yes
  use_zlib=yes   
  use_thread=yes   
  use_dl=yes
fi
if [ ${exa} = "hdf5_ntuple" ] ; then
  use_hdf5=yes
  use_zlib=yes   
  use_thread=yes   
  use_dl=yes
fi
if [ ${exa} = "hdf5_threads" ] ; then
  use_hdf5=yes
  use_zlib=yes   
  use_thread=yes
  use_dl=yes
fi

if [ ${exa} = "cern_root_hdf5_ntuple" ] ; then
  use_cern_root=yes    
  use_hdf5=yes
  use_zlib=yes    
  use_thread=yes    
  use_dl=yes
elif [ ${exa} = "cern_root_read_rg_rbw" ] ; then
  use_cern_root=yes    
elif [ ${exa} = "polyhedron_Qt" ] ; then
  cppflags="${cppflags} -I../../tools/sg"
  cppflags="${cppflags} -I../../tools/lina"
else
  cppflags="${cppflags} ${test_cppflags}"
fi

if [ ${exa} = "update" ] ; then
  use_expat=yes
  use_geant4=yes    
fi

if [ ${exa} = "all" ] ; then
  if [ ${build_cl_exe} = "yes" ] ; then
    build_use_our=yes
  elif [ ${build_mingw_gnu} = "yes" ] ; then
    build_use_our=yes
  fi      
    
  use_expat=yes
  use_zlib=yes
  use_freetype=yes
  use_hdf5=yes
#  use_geant4=yes    
  if [ ${build_cl_exe} = "yes" ] ; then
    use_WGL=yes
    use_Windows=yes
    use_Qt=yes
  elif [ ${build_mingw_gnu} = "yes" ] ; then
    use_WGL=yes
    use_Windows=yes
    use_Qt=yes
  else
    #use_Qt=yes
    use_Xm=yes
    use_Xt=yes
    use_mpi=yes
    use_GLX=yes
    use_X11=yes
  fi      
fi

if [ ${exa} = "polyhedron_X11" ] ; then
  use_GLX=yes
  use_X11=yes
fi

if [ ${exa} = "polyhedron_Windows" ] ; then
  #cppflags="${cppflags} -I../../toolx/Windows"
  use_WGL=yes
  use_Windows=yes
fi

if [ ${exa} = "polyhedron_metal" ] ; then
  use_metal=yes
fi

if [ ${exa} = "polyhedron_Qt" ] ; then
  use_Qt=yes    
  if [ ${build_cl_exe} = "yes" ] ; then
    use_WGL=yes
    use_Windows=yes
  elif [ ${build_mingw_gnu} = "yes" ] ; then
    use_WGL=yes
    use_Windows=yes
  else      
    if [ `uname` = Darwin ] ; then
      use_AGL=yes
    else      
      use_GLX=yes
      use_X11=yes
    fi
  fi
fi

if [ ${exa} = "gui_polyhedron_X11" ] ; then
  use_jpeg=yes
  use_png=yes
  use_freetype=yes
  use_GLX=yes
  use_X11=yes
  use_zlib=yes
fi

if [ ${exa} = "utest" ] ; then
  build_use_our=yes

  do_expat=yes    
  do_hdf5=yes    
  do_freetype=yes
    
  if [ ${build_cl_exe} = "yes" ] ; then
    cppflags="${cppflags} -bigobj"
    ccflags0="${ccflags0} -bigobj"
  elif [ ${build_mingw_gnu} = "yes" ] ; then
    cppflags="${cppflags} -Wa,-mbig-obj"
    ccflags0="${ccflags0} -Wa,-mbig-obj"
  fi
  
  cppfiles="${cppfiles} ./test/histo.cpp"
  cppfiles="${cppfiles} ./test/root_histo.cpp"
  cppfiles="${cppfiles} ./test/root_ntuple.cpp"
  cppfiles="${cppfiles} ./test/csv_histo.cpp"
  cppfiles="${cppfiles} ./test/csv_ntuple.cpp"
  cppfiles="${cppfiles} ./test/columns.cpp"
  cppfiles="${cppfiles} ./test/viewplot.cpp"

  if [ ${do_expat} = "yes" ] ; then
    cppfiles="${cppfiles} ./test/axml.cpp"
    use_expat=yes    
  fi
  
  if [ ${do_hdf5} = "yes" ] ; then
    cppfiles="${cppfiles} ./test/hdf5.cpp"
    cppfiles="${cppfiles} ./test/hdf5_histo.cpp"
    cppfiles="${cppfiles} ./test/hdf5_ntuple.cpp"
    use_hdf5=yes
    use_zlib=yes    
    use_thread=yes    
    use_freetype=yes
    use_dl=yes
  fi
  
  if [ ${do_freetype} = "yes" ] ; then
    # WARNING : below tests do not pass on my Mac with a freetype/2.7.0 (whilst ok with a 2.8.0).  
    cppfiles="${cppfiles} ./test/lego_offscreen_zb.cpp"
    use_freetype=yes    
    if [ ${do_expat} = "yes" ] ; then
      cppfiles="${cppfiles} ./test/viewplot_ttf.cpp"
      use_expat=yes    
    fi  
  fi  

fi

if [ ${build_mingw_gnu} = "yes" -a "${use_X11}" = yes ] ; then
  echo "mingw: skip ${exa} X11 apps."
  exit
fi


if [ ${build_use_our} = yes ] ; then
  ourex_home=../../../../inexlib/ourex
  if [ ! -d "${ourex_home}" ] ; then
    echo 'warning: build_use_our set to yes, but ourex directory not found.'
    echo 'warning: Continue by using external packages taken from the system.'
    build_use_our=no
  fi
fi

if [ ${build_use_our} = yes ] ; then
  build_use_our_expat=yes
  build_use_our_hdf5=yes
  build_use_our_mpi=yes
  build_use_our_freetype=yes
  build_use_our_png=yes
  build_use_our_jpeg=yes
  build_use_our_zlib=yes
fi

. ./use_geant4

. ./use_cern_root

#////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////
. ./use_Qt

. ./use_Xm
. ./use_Xt

. ./use_GLX
. ./use_X11

. ./use_WGL
. ./use_Windows

. ./use_AGL

. ./use_metal

. ./use_freetype
. ./use_expat
. ./use_mpi
. ./use_hdf5
. ./use_jpeg
. ./use_png
. ./use_zlib
. ./use_thread
. ./use_dl

#////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////
# let the freedom to some application to not use G4_cppflags.
cppflags="${G4_cppflags} ${cppflags}"

for file in ${cfiles} ; do
  oname=`basename ${file}`
  obj="./${oname}.o"
  eval ${cc_compiler} -c ${ccflags} -o ${obj} ${file}
  use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  objs="${objs} ${obj}"
done

if [ ${exa} = "polyhedron_metal" ] ; then
  mmfiles="${mmfiles} ${exa}.mm"
else
  cppfiles="${cppfiles} ${exa}.cpp"
fi

for file in ${cppfiles} ; do
  oname=`basename ${file}`
  obj="./${oname}.o"
  eval ${cpp_compiler} -c ${cppflags} -o ${obj} ${file}
  use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  objs="${objs} ${obj}"
done

for file in ${mmfiles} ; do
  oname=`basename ${file}`
  obj="./${oname}.o"
  eval ${cpp_compiler} -x objective-c++ -c ${cppflags} ${mmflags} -o ${obj} ${file}
  use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  objs="${objs} ${obj}"
done

eval ${cpp_linker} -o tools_test_${exa} ${cppflags} ${objs} ${libs}

/bin/rm -f ${objs}

