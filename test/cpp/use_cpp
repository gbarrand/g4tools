
cpp_compiler=cpp_not_defined

if [ ${build_icc} = "yes" ] ; then
  cpp_compiler=icpc
  cpp_linker=icpc
elif [ ${build_gnu} = "yes" ] ; then
  cpp_compiler=g++
  cpp_linker=g++
elif [ ${build_clang} = "yes" ] ; then
  cpp_compiler=clang++
  cpp_linker=clang++
elif [ ${build_cl_exe} = "yes" ] ; then
  cpp_compiler=./vc++
  cpp_linker=./vc++
elif [ ${build_mingw_gnu} = "yes" ] ; then
  . ./use_mingw
  cpp_compiler=${mingw_home}/bin/x86_64-w64-mingw32-g++${mingw_suffix}
  cpp_linker=${mingw_home}/bin/x86_64-w64-mingw32-g++${mingw_suffix}
else
  cpp_compiler=c++
  cpp_linker=c++
fi

cppflags=
G4_cppflags=
if [ ${build_cl_exe} = "yes" ] ; then

  ./check_app cl.exe 'cl.exe not found. You have to setup VisualC++.'
  use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi

  if [ "${build_verbose}" = "yes" ] ; then cppflags="${cppflags} -verbose"; fi
  
  #cppflags="${cppflags} -DWIN32" 

  if [ ${build_mem} = "yes" ] ; then
    cppflags="${cppflags} -DTOOLS_MEM"
  fi

  cppflags="${cppflags} -I.."

elif [ ${build_mingw_gnu} = "yes" ] ; then
  cppflags="${cppflags} -Wno-unknown-pragmas"
else

  if [ ${build_debug} = "yes" ] ; then
    cppflags="${cppflags} -g"
  else
    cppflags="${cppflags} -O2"
  fi

  if [ ${build_mem} = "yes" ] ; then
    cppflags="${cppflags} -DTOOLS_MEM"
  fi

  if [ ${build_icc} = "yes" ] ; then
    G4_cppflags="-ansi -Wno-non-virtual-dtor -Wwrite-strings -Wpointer-arith -Woverloaded-virtual"
  else
    if [ ${build_clang} = "yes" ] ; then
      G4_cppflags="-Wno-non-virtual-dtor -Wwrite-strings -Wpointer-arith -Woverloaded-virtual"
    else
      G4_cppflags="-W -Wall -pedantic -Wno-non-virtual-dtor -Wno-long-long -Wwrite-strings -Wpointer-arith -Woverloaded-virtual"
      if [ `uname` != Darwin ] ; then
        # now the default compiler is clang that does not support -ansi.
        G4_cppflags="${G4_cppflags} -ansi"
      else	
        G4_cppflags="${G4_cppflags} -Wno-variadic-macros" # for /opt/local/include/X11/Xfuncproto.h.
      fi
      G4_cppflags="${G4_cppflags} -Wshadow"
    fi
  fi

  if [ `uname` = "Linux" ] ; then  # needed to build polyhedron_Qt.
    cppflags="${cppflags} -fPIC"
  fi

fi

cppflags0="${cppflags}"
